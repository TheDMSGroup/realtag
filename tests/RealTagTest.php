<?php

namespace westonwatson\RealTag\Tests;


use PHPUnit\Framework\TestCase;
use westonwatson\realtag\CurlRequest;
use westonwatson\realtag\HttpRequest;
use westonwatson\realtag\RealTag;
use stdClass;
use westonwatson\realtag\RealTagHelper;

/**
 * Class RealTagTest
 *
 * @package westonwatson\realtag
 */
class RealTagTest extends TestCase
{
    const TEST_TOKEN     = 'ThisIsATestTokenString';

    const TEST_HEADERS   = ['Content-Type: application/json'];

    const GOOD_POST_DATA = [
        "FullName"     => "Donald Trump",
        "AddressLine1" => "1600 Pennsylvania Ave., NW",
        "City"         => "Washington",
        "State"        => "DC",
        "Zip"          => "20500",
        "ExternalID"   => "maga20500",
    ];

    const BAD_POST_DATA  = [];

    /**
     * @var
     */
    private $testResponse;

    /**
     * @var
     */
    private $testDecodedResp;

    /**
     *
     */
    public function setUp(): void
    {
        //require_once('../src/RealTag.php');
        require_once __DIR__ . '/../vendor/autoload.php';
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->testResponse    = json_encode(['test' => 'response', 'Error' => '', 'Success' => true]);
        $this->testDecodedResp = json_decode($this->testResponse);
    }

    public function testDecodeResponseAndSetEndpointAndSetHeaders()
    {
        $test_token_string = self::TEST_TOKEN;
        $testBaseUrl       = 'http://google.com';
        $test_endpoint     = "{$testBaseUrl}?code={$test_token_string}";
        $stub              = $this->createMock(CurlRequest::class);

        $stub
            ->expects($this->any())
            ->method('setUrl')
            ->with($test_endpoint);

        $stub
            ->expects($this->once())
            ->method('setHeaders')
            ->with(self::TEST_HEADERS);

        $stub
            ->expects($this->any())
            ->method('execute')
            ->willReturn($this->testResponse);

        $realtag = new RealTag($test_token_string, true, $stub);
        $realtag->setEndpoint($testBaseUrl);

        $mocked_response = $realtag->call(self::GOOD_POST_DATA);

        $this->assertEquals($this->testDecodedResp, $mocked_response);
    }

    public function testBlankResponseException()
    {
        $test_token_string = self::TEST_TOKEN;
        $stub              = $this->createMock(CurlRequest::class);
        $realtag           = new RealTag($test_token_string, true, $stub);

        $stub
            ->expects($this->any())
            ->method('execute')
            ->willReturn('');

        $this->expectException(\Exception::class);

        $realtag->call(self::GOOD_POST_DATA);
    }

    public function testInvalidInput()
    {
        $realtag = new RealTag(self::TEST_TOKEN, true);
        $this->expectException(\Exception::class);
        $realtag->call([]);
    }
}
